module Hecs.World.Has (
  Has(..)
) where
import Data.Kind
import Data.Proxy
import Hecs.Component.Internal

-- A mapping from World -> ComponentId. A ComponentId from one World is not valid in another

-- | Defines a mapping from the type 'w' to a component id.
--
-- These instances are often generated by template haskell in 'makeWorld'.
--
-- Only manually define if you know what you are doing:
-- * Hecs defines several global components manually, make sure not to overlap those
-- * If also using 'makeWorld' make sure to not overlap any ids there
-- * Lastly make sure to allocate the component id when creating the world to ensure it cannot be allocated later again
class Has (w :: Type) (c :: k) where
  getComponentId :: Proxy w -> ComponentId c

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="389" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="389" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.insert' (2 samples, 0.20%)</title><rect x="1167.6" y="69" width="2.3" height="15.0" fill="rgb(253,171,36)" rx="2" ry="2" />
<text text-anchor="" x="1170.58" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>FlatParse.Basic.runParser (24 samples, 2.40%)</title><rect x="1141.6" y="133" width="28.3" height="15.0" fill="rgb(223,12,25)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >F..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.unsafeLiftIO (2 samples, 0.20%)</title><rect x="1043.7" y="85" width="2.3" height="15.0" fill="rgb(244,85,39)" rx="2" ry="2" />
<text text-anchor="" x="1046.68" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Exception.Safe.bracketWithError (902 samples, 90.20%)</title><rect x="18.3" y="245" width="1064.3" height="15.0" fill="rgb(230,54,27)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Exception.Safe.bracketWithError</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Optics.Internal.Optic.castOptic (1 samples, 0.10%)</title><rect x="1140.4" y="213" width="1.2" height="15.0" fill="rgb(212,65,20)" rx="2" ry="2" />
<text text-anchor="" x="1143.44" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.Internal.throwSocketErrorIfMinus1RetryMayBlock (3 samples, 0.30%)</title><rect x="1053.1" y="53" width="3.6" height="15.0" fill="rgb(219,176,43)" rx="2" ry="2" />
<text text-anchor="" x="1056.12" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.Array.copy (1 samples, 0.10%)</title><rect x="1107.4" y="181" width="1.2" height="15.0" fill="rgb(241,172,32)" rx="2" ry="2" />
<text text-anchor="" x="1110.40" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.inflate (11 samples, 1.10%)</title><rect x="1172.3" y="37" width="13.0" height="15.0" fill="rgb(225,107,5)" rx="2" ry="2" />
<text text-anchor="" x="1175.30" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.unsafeInsert (1 samples, 0.10%)</title><rect x="1121.6" y="181" width="1.1" height="15.0" fill="rgb(210,49,2)" rx="2" ry="2" />
<text text-anchor="" x="1124.56" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Chunk.Section.Chunk.Section.lookupTag (6 samples, 0.60%)</title><rect x="1147.5" y="117" width="7.1" height="15.0" fill="rgb(226,165,16)" rx="2" ry="2" />
<text text-anchor="" x="1150.52" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Handler.Play.playProtocol (8 samples, 0.80%)</title><rect x="1047.2" y="133" width="9.5" height="15.0" fill="rgb(231,66,44)" rx="2" ry="2" />
<text text-anchor="" x="1050.22" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.popOutputBuffer (1 samples, 0.10%)</title><rect x="1042.5" y="85" width="1.2" height="15.0" fill="rgb(206,204,8)" rx="2" ry="2" />
<text text-anchor="" x="1045.50" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Simple.TCP.listen (902 samples, 90.20%)</title><rect x="18.3" y="277" width="1064.3" height="15.0" fill="rgb(215,149,41)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Network.Simple.TCP.listen</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Exception.Safe.withException (902 samples, 90.20%)</title><rect x="18.3" y="181" width="1064.3" height="15.0" fill="rgb(211,184,6)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Exception.Safe.withException</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Game.Event.applyEvent (85 samples, 8.50%)</title><rect x="1085.0" y="245" width="100.3" height="15.0" fill="rgb(229,81,3)" rx="2" ry="2" />
<text text-anchor="" x="1087.98" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Game.Event.a..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.unsafeLiftIO (35 samples, 3.50%)</title><rect x="998.8" y="69" width="41.3" height="15.0" fill="rgb(226,103,33)" rx="2" ry="2" />
<text text-anchor="" x="1001.84" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Cod..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Util.VarNum.writeVarNumInternal (14 samples, 1.40%)</title><rect x="1064.9" y="133" width="16.5" height="15.0" fill="rgb(209,17,27)" rx="2" ry="2" />
<text text-anchor="" x="1067.92" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.finalise (35 samples, 3.50%)</title><rect x="998.8" y="85" width="41.3" height="15.0" fill="rgb(224,82,31)" rx="2" ry="2" />
<text text-anchor="" x="1001.84" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Cod..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.union (2 samples, 0.20%)</title><rect x="1108.6" y="213" width="2.3" height="15.0" fill="rgb(253,36,51)" rx="2" ry="2" />
<text text-anchor="" x="1111.58" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Simple.TCP.recv (4 samples, 0.40%)</title><rect x="1051.9" y="117" width="4.8" height="15.0" fill="rgb(253,114,3)" rx="2" ry="2" />
<text text-anchor="" x="1054.94" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (1,000 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(235,171,47)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.ByteString.IO.recv (3 samples, 0.30%)</title><rect x="1053.1" y="101" width="3.6" height="15.0" fill="rgb(220,77,29)" rx="2" ry="2" />
<text text-anchor="" x="1056.12" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Util.BitSet.complement (1 samples, 0.10%)</title><rect x="1138.1" y="197" width="1.2" height="15.0" fill="rgb(226,71,25)" rx="2" ry="2" />
<text text-anchor="" x="1141.08" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Exception.Safe.bracket (902 samples, 90.20%)</title><rect x="18.3" y="261" width="1064.3" height="15.0" fill="rgb(223,102,24)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Exception.Safe.bracket</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.Strict.fromList (1 samples, 0.10%)</title><rect x="1046.0" y="133" width="1.2" height="15.0" fill="rgb(238,17,49)" rx="2" ry="2" />
<text text-anchor="" x="1049.04" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>IO.Chunkloading.loadChunk (37 samples, 3.70%)</title><rect x="1141.6" y="197" width="43.7" height="15.0" fill="rgb(210,80,3)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >IO.C..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Internal.decompress (11 samples, 1.10%)</title><rect x="1172.3" y="69" width="13.0" height="15.0" fill="rgb(239,119,36)" rx="2" ry="2" />
<text text-anchor="" x="1175.30" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.runStream (788 samples, 78.80%)</title><rect x="116.2" y="101" width="929.8" height="15.0" fill="rgb(234,104,13)" rx="2" ry="2" />
<text text-anchor="" x="119.20" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.Compression.Zlib.Stream.runStream</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Exception.Safe.onException (902 samples, 90.20%)</title><rect x="18.3" y="197" width="1064.3" height="15.0" fill="rgb(217,93,29)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Exception.Safe.onException</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Simple.TCP.serve (902 samples, 90.20%)</title><rect x="18.3" y="293" width="1064.3" height="15.0" fill="rgb(232,212,9)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Network.Simple.TCP.serve</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>IO.RegionFile.readChunkData (13 samples, 1.30%)</title><rect x="1169.9" y="133" width="15.4" height="15.0" fill="rgb(212,128,7)" rx="2" ry="2" />
<text text-anchor="" x="1172.94" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.ByteString.Lazy.Posix.sendAll (7 samples, 0.70%)</title><rect x="1056.7" y="117" width="8.2" height="15.0" fill="rgb(227,200,4)" rx="2" ry="2" />
<text text-anchor="" x="1059.66" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.insert (14 samples, 1.40%)</title><rect x="1092.1" y="213" width="16.5" height="15.0" fill="rgb(230,139,44)" rx="2" ry="2" />
<text text-anchor="" x="1095.06" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.ByteString.Lazy.Posix.send (6 samples, 0.60%)</title><rect x="1057.8" y="101" width="7.1" height="15.0" fill="rgb(247,104,15)" rx="2" ry="2" />
<text text-anchor="" x="1060.84" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>LCraft.startServer (992 samples, 99.20%)</title><rect x="14.7" y="309" width="1170.6" height="15.0" fill="rgb(211,107,1)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >LCraft.startServer</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.runProtocol (902 samples, 90.20%)</title><rect x="18.3" y="149" width="1064.3" height="15.0" fill="rgb(208,51,4)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Network.runProtocol</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Internal.compress (794 samples, 79.40%)</title><rect x="109.1" y="117" width="936.9" height="15.0" fill="rgb(230,209,16)" rx="2" ry="2" />
<text text-anchor="" x="112.12" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.Compression.Zlib.Internal.compress</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>World.Internal.chunkloading (37 samples, 3.70%)</title><rect x="1141.6" y="181" width="43.7" height="15.0" fill="rgb(240,123,28)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Worl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Chunk.Section.Chunk.Section.countBlocks (1 samples, 0.10%)</title><rect x="1146.3" y="117" width="1.2" height="15.0" fill="rgb(220,193,11)" rx="2" ry="2" />
<text text-anchor="" x="1149.34" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.difference (10 samples, 1.00%)</title><rect x="1110.9" y="197" width="11.8" height="15.0" fill="rgb(207,179,45)" rx="2" ry="2" />
<text text-anchor="" x="1113.94" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.Internal.throwSocketErrorIfMinus1RetryMayBlock (5 samples, 0.50%)</title><rect x="1059.0" y="69" width="5.9" height="15.0" fill="rgb(222,58,1)" rx="2" ry="2" />
<text text-anchor="" x="1062.02" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.Strict.insert (5 samples, 0.50%)</title><rect x="1164.0" y="101" width="5.9" height="15.0" fill="rgb(210,48,35)" rx="2" ry="2" />
<text text-anchor="" x="1167.04" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Optics.Internal.Utils.runTraversed (87 samples, 8.70%)</title><rect x="1082.6" y="293" width="102.7" height="15.0" fill="rgb(208,107,6)" rx="2" ry="2" />
<text text-anchor="" x="1085.62" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Optics.Inter..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Util.BitSet.complement (1 samples, 0.10%)</title><rect x="1081.4" y="133" width="1.2" height="15.0" fill="rgb(206,59,11)" rx="2" ry="2" />
<text text-anchor="" x="1084.44" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.hash (1 samples, 0.10%)</title><rect x="1093.2" y="197" width="1.2" height="15.0" fill="rgb(228,19,39)" rx="2" ry="2" />
<text text-anchor="" x="1096.24" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.outputBufferFull (1 samples, 0.10%)</title><rect x="1041.3" y="85" width="1.2" height="15.0" fill="rgb(232,44,17)" rx="2" ry="2" />
<text text-anchor="" x="1044.32" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.deflate (684 samples, 68.40%)</title><rect x="123.3" y="85" width="807.1" height="15.0" fill="rgb(230,39,48)" rx="2" ry="2" />
<text text-anchor="" x="126.28" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.Compression.Zlib.Stream.deflate</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Main.newGameState (37 samples, 3.70%)</title><rect x="1141.6" y="165" width="43.7" height="15.0" fill="rgb(254,130,20)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Main..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashSet.Internal.difference (10 samples, 1.00%)</title><rect x="1110.9" y="213" width="11.8" height="15.0" fill="rgb(240,4,37)" rx="2" ry="2" />
<text text-anchor="" x="1113.94" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.unsafeLiftIO (57 samples, 5.70%)</title><rect x="931.6" y="69" width="67.2" height="15.0" fill="rgb(238,216,30)" rx="2" ry="2" />
<text text-anchor="" x="934.58" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.C..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Util.BitSet.set (1 samples, 0.10%)</title><rect x="1139.3" y="197" width="1.1" height="15.0" fill="rgb(238,209,5)" rx="2" ry="2" />
<text text-anchor="" x="1142.26" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Game.Event.PlayerMoved.playerMoved (85 samples, 8.50%)</title><rect x="1085.0" y="229" width="100.3" height="15.0" fill="rgb(244,220,38)" rx="2" ry="2" />
<text text-anchor="" x="1087.98" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Game.Event.P..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Packet.Client.Play.ChunkData.mkChunkData (15 samples, 1.50%)</title><rect x="1122.7" y="213" width="17.7" height="15.0" fill="rgb(215,168,46)" rx="2" ry="2" />
<text text-anchor="" x="1125.74" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.deflateInit (58 samples, 5.80%)</title><rect x="930.4" y="85" width="68.4" height="15.0" fill="rgb(239,23,44)" rx="2" ry="2" />
<text text-anchor="" x="933.40" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.C..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.insert' (12 samples, 1.20%)</title><rect x="1094.4" y="197" width="14.2" height="15.0" fill="rgb(221,202,7)" rx="2" ry="2" />
<text text-anchor="" x="1097.42" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.compressWith (794 samples, 79.40%)</title><rect x="109.1" y="133" width="936.9" height="15.0" fill="rgb(244,124,54)" rx="2" ry="2" />
<text text-anchor="" x="112.12" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.Compression.Zlib.compressWith</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.Types.withFdSocket (5 samples, 0.50%)</title><rect x="1059.0" y="85" width="5.9" height="15.0" fill="rgb(236,191,14)" rx="2" ry="2" />
<text text-anchor="" x="1062.02" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MAIN.MAIN (996 samples, 99.60%)</title><rect x="10.0" y="341" width="1175.3" height="15.0" fill="rgb(208,220,34)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >MAIN.MAIN</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.decompress (11 samples, 1.10%)</title><rect x="1172.3" y="101" width="13.0" height="15.0" fill="rgb(243,142,14)" rx="2" ry="2" />
<text text-anchor="" x="1175.30" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Exception.Safe.catch (902 samples, 90.20%)</title><rect x="18.3" y="229" width="1064.3" height="15.0" fill="rgb(248,42,32)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Exception.Safe.catch</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.hash (2 samples, 0.20%)</title><rect x="1165.2" y="69" width="2.4" height="15.0" fill="rgb(241,206,38)" rx="2" ry="2" />
<text text-anchor="" x="1168.22" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Control.Exception.Safe.finally (902 samples, 90.20%)</title><rect x="18.3" y="165" width="1064.3" height="15.0" fill="rgb(246,7,37)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Control.Exception.Safe.finally</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>FlatParse.Basic.runParser (1 samples, 0.10%)</title><rect x="1050.8" y="117" width="1.1" height="15.0" fill="rgb(211,9,13)" rx="2" ry="2" />
<text text-anchor="" x="1053.76" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.hash (1 samples, 0.10%)</title><rect x="1120.4" y="181" width="1.2" height="15.0" fill="rgb(241,78,12)" rx="2" ry="2" />
<text text-anchor="" x="1123.38" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Simple.TCP.sendLazy (7 samples, 0.70%)</title><rect x="1056.7" y="133" width="8.2" height="15.0" fill="rgb(221,201,17)" rx="2" ry="2" />
<text text-anchor="" x="1059.66" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>IO.Chunkloading.newFromFolder (37 samples, 3.70%)</title><rect x="1141.6" y="149" width="43.7" height="15.0" fill="rgb(242,199,13)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >IO.C..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Util.NBT.Internal.Util.NBT.Internal.tagFromId (13 samples, 1.30%)</title><rect x="1154.6" y="117" width="15.3" height="15.0" fill="rgb(248,225,49)" rx="2" ry="2" />
<text text-anchor="" x="1157.60" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.decompressWith (11 samples, 1.10%)</title><rect x="1172.3" y="85" width="13.0" height="15.0" fill="rgb(250,214,5)" rx="2" ry="2" />
<text text-anchor="" x="1175.30" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>World.Internal.getOrLoadChunk (37 samples, 3.70%)</title><rect x="1141.6" y="213" width="43.7" height="15.0" fill="rgb(210,191,22)" rx="2" ry="2" />
<text text-anchor="" x="1144.62" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Worl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Hashable.Class.defaultLiftHashWithSalt (1 samples, 0.10%)</title><rect x="1153.4" y="85" width="1.2" height="15.0" fill="rgb(209,71,53)" rx="2" ry="2" />
<text text-anchor="" x="1156.42" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.Buffer.recvBuf (3 samples, 0.30%)</title><rect x="1053.1" y="85" width="3.6" height="15.0" fill="rgb(216,196,30)" rx="2" ry="2" />
<text text-anchor="" x="1056.12" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Main.main (992 samples, 99.20%)</title><rect x="14.7" y="325" width="1170.6" height="15.0" fill="rgb(219,177,4)" rx="2" ry="2" />
<text text-anchor="" x="17.72" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Main.main</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Hashable.LowLevel.hashPtrWithSalt (1 samples, 0.10%)</title><rect x="1166.4" y="53" width="1.2" height="15.0" fill="rgb(225,12,48)" rx="2" ry="2" />
<text text-anchor="" x="1169.40" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.Hashable.Class.hashWithSalt1 (2 samples, 0.20%)</title><rect x="1152.2" y="101" width="2.4" height="15.0" fill="rgb(231,111,25)" rx="2" ry="2" />
<text text-anchor="" x="1155.24" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Data.HashMap.Internal.insert (5 samples, 0.50%)</title><rect x="1164.0" y="85" width="5.9" height="15.0" fill="rgb(228,32,3)" rx="2" ry="2" />
<text text-anchor="" x="1167.04" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.unsafeLiftIO (684 samples, 68.40%)</title><rect x="123.3" y="69" width="807.1" height="15.0" fill="rgb(238,204,20)" rx="2" ry="2" />
<text text-anchor="" x="126.28" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Codec.Compression.Zlib.Stream.unsafeLiftIO</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.runStream (11 samples, 1.10%)</title><rect x="1172.3" y="53" width="13.0" height="15.0" fill="rgb(214,128,27)" rx="2" ry="2" />
<text text-anchor="" x="1175.30" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Socket.Types.withFdSocket (3 samples, 0.30%)</title><rect x="1053.1" y="69" width="3.6" height="15.0" fill="rgb(253,167,26)" rx="2" ry="2" />
<text text-anchor="" x="1056.12" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Network.Simple.TCP.acceptFork (902 samples, 90.20%)</title><rect x="18.3" y="213" width="1064.3" height="15.0" fill="rgb(214,159,35)" rx="2" ry="2" />
<text text-anchor="" x="21.26" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >Network.Simple.TCP.acceptFork</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Codec.Compression.Zlib.Stream.inputBufferEmpty (1 samples, 0.10%)</title><rect x="1040.1" y="85" width="1.2" height="15.0" fill="rgb(241,50,27)" rx="2" ry="2" />
<text text-anchor="" x="1043.14" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>FlatParse.Basic.runParser (12 samples, 1.20%)</title><rect x="1171.1" y="117" width="14.2" height="15.0" fill="rgb(242,102,30)" rx="2" ry="2" />
<text text-anchor="" x="1174.12" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>UNKNOWN (4 samples, 0.40%)</title><rect x="1185.3" y="341" width="4.7" height="15.0" fill="rgb(216,50,8)" rx="2" ry="2" />
<text text-anchor="" x="1188.28" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
